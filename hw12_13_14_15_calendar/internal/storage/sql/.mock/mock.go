// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_sqlstorage is a generated GoMock package.
package mock_sqlstorage

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/romandnk/HW/hw12_13_14_15_calendar/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockStoreEvent is a mock of StoreEvent interface.
type MockStoreEvent struct {
	ctrl     *gomock.Controller
	recorder *MockStoreEventMockRecorder
}

// MockStoreEventMockRecorder is the mock recorder for MockStoreEvent.
type MockStoreEventMockRecorder struct {
	mock *MockStoreEvent
}

// NewMockStoreEvent creates a new mock instance.
func NewMockStoreEvent(ctrl *gomock.Controller) *MockStoreEvent {
	mock := &MockStoreEvent{ctrl: ctrl}
	mock.recorder = &MockStoreEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreEvent) EXPECT() *MockStoreEventMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStoreEvent) Create(ctx context.Context, event models.Event) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, event)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStoreEventMockRecorder) Create(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStoreEvent)(nil).Create), ctx, event)
}

// Delete mocks base method.
func (m *MockStoreEvent) Delete(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreEventMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStoreEvent)(nil).Delete), ctx, id)
}

// GetAllByDay mocks base method.
func (m *MockStoreEvent) GetAllByDay(ctx context.Context, date time.Time) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByDay", ctx, date)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByDay indicates an expected call of GetAllByDay.
func (mr *MockStoreEventMockRecorder) GetAllByDay(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByDay", reflect.TypeOf((*MockStoreEvent)(nil).GetAllByDay), ctx, date)
}

// GetAllByMonth mocks base method.
func (m *MockStoreEvent) GetAllByMonth(ctx context.Context, date time.Time) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByMonth", ctx, date)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByMonth indicates an expected call of GetAllByMonth.
func (mr *MockStoreEventMockRecorder) GetAllByMonth(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByMonth", reflect.TypeOf((*MockStoreEvent)(nil).GetAllByMonth), ctx, date)
}

// GetAllByWeek mocks base method.
func (m *MockStoreEvent) GetAllByWeek(ctx context.Context, date time.Time) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByWeek", ctx, date)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByWeek indicates an expected call of GetAllByWeek.
func (mr *MockStoreEventMockRecorder) GetAllByWeek(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByWeek", reflect.TypeOf((*MockStoreEvent)(nil).GetAllByWeek), ctx, date)
}

// Update mocks base method.
func (m *MockStoreEvent) Update(ctx context.Context, id string, event models.Event) (models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, event)
	ret0, _ := ret[0].(models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStoreEventMockRecorder) Update(ctx, id, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStoreEvent)(nil).Update), ctx, id, event)
}
