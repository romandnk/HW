// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/romandnk/HW/hw12_13_14_15_calendar/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockServices) CreateEvent(ctx context.Context, event models.Event) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockServicesMockRecorder) CreateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockServices)(nil).CreateEvent), ctx, event)
}

// DeleteEvent mocks base method.
func (m *MockServices) DeleteEvent(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockServicesMockRecorder) DeleteEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockServices)(nil).DeleteEvent), ctx, id)
}

// GetAllByDayEvents mocks base method.
func (m *MockServices) GetAllByDayEvents(ctx context.Context, date time.Time) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByDayEvents", ctx, date)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByDayEvents indicates an expected call of GetAllByDayEvents.
func (mr *MockServicesMockRecorder) GetAllByDayEvents(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByDayEvents", reflect.TypeOf((*MockServices)(nil).GetAllByDayEvents), ctx, date)
}

// GetAllByMonthEvents mocks base method.
func (m *MockServices) GetAllByMonthEvents(ctx context.Context, date time.Time) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByMonthEvents", ctx, date)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByMonthEvents indicates an expected call of GetAllByMonthEvents.
func (mr *MockServicesMockRecorder) GetAllByMonthEvents(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByMonthEvents", reflect.TypeOf((*MockServices)(nil).GetAllByMonthEvents), ctx, date)
}

// GetAllByWeekEvents mocks base method.
func (m *MockServices) GetAllByWeekEvents(ctx context.Context, date time.Time) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByWeekEvents", ctx, date)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByWeekEvents indicates an expected call of GetAllByWeekEvents.
func (mr *MockServicesMockRecorder) GetAllByWeekEvents(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByWeekEvents", reflect.TypeOf((*MockServices)(nil).GetAllByWeekEvents), ctx, date)
}

// UpdateEvent mocks base method.
func (m *MockServices) UpdateEvent(ctx context.Context, id string, event models.Event) (models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, id, event)
	ret0, _ := ret[0].(models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockServicesMockRecorder) UpdateEvent(ctx, id, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockServices)(nil).UpdateEvent), ctx, id, event)
}
